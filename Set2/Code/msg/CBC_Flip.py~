#! /usr/bin/python3

# builtin imports
from random import randint

# Custom imports
from .padding import pkcs7
from .AES import encryptMsgCBC
from .AES import decryptMsgCBC

### This holds 2 functions,
#  1) Inject in-between a pre and append string function
#  2) decrypt and parse, looking for admin=  (returns 2 pair tuple)

def insert(user,block_size):
    #msg = ''
    msg = bytearray( _userinput(user).encode())
    print(msg)

    #padded = ''
    padded = _padmsg(msg, block_size)

    key, iv = _randomize(block_size)

    return (encryptMsgCBC(padded, key, iv), padded, key, iv)

def inspect(encrypted, key, iv):
    """This will return a dictionary of pairs and whether admin was found"""
    decrypted = decryptMsgCBC(encrypted, key, iv)
    pairs = _parse(decrypted)
    return pairs

def _parse(msg):
    """This ensures it is a string then creates a dictionary of pairs"""
    holding = msg
    dic = {}
    if not isinstance(holding,bytes):
        if isinstance(holding, bytearray):
            holding = bytes(holding)
        else:
            holding = holding.encode()
    pairs = holding.split(b';')
    
    for pair in pairs:
        print(pair)
        print(type(pair))
        try:
            dic[pair.split(b'=')[0]] = pair.split(b'=')[1:]
        except:
            dic[pair] = None
    return dic
                                          

def _randomize(block_size):
    """This returns both a random key and iv"""
    key= []
    iv= []
    for i in range(block_size):
        key.append(randint(0,255))
        iv.append(randint(0,255))
    key = bytearray(key)
    iv = bytearray(iv)
    return key, iv
    
def _userinput(user):
    """Takes a string of user input and strips out ";" and "="
If I feel fancy, this will also do that with bytearrays"""
    userinput = ''
    userinput = user
    userinput = userinput.replace(";","")
    userinput = userinput.replace("=","")
    pre = "comment1=cooking%20MCs;userdata="
    append = ";comment2=%20like%20a%20pound%20of%20bacon"
    return pre + userinput + append

def _padmsg(msg, block_size):
    """This will add padding to the msg.  Block_size needs to be an int"""
    return pkcs7(msg, block_size)

if __name__ == "__main__":
    user = input("Need input <Johnny 5>\n")
    msg = bytearray(_userinput(user).encode())
    print(msg.decode())
    
    blocksize = input("What is the block size (in bytes)?\n")
    blocksize = int(blocksize)
    msg = pkcs7(msg, blocksize)

    print(msg)
    print("Now encoding under a random CBC AES 128 key...")

    key = []
    iv = []
    for i in range(blocksize):
        key.append(randint(0,255))
        iv.append(randint(0,255))
    assert len(key) >= 16
    assert len(iv) >= 16

    
    
    
    
    
